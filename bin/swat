#!/bin/bash

project=$1
host=$2
shift;
shift;
rest_args=$@

swat_ini_file='swat.ini'

project=${project:=`pwd`}

if [ \(  -n "${project}"  \) -a \( -d "${project}" \) ]; then
    is_swat_package=0
elif perl -M$project -MFile::ShareDir -e "File::ShareDir::module_dir($project)"  ; then
    is_swat_package=1
    project=`perl -M$project -MFile::ShareDir -e "print(File::ShareDir::module_dir($project))"`;
else
    echo "usage: swat project HOST:port prover-options"
    exit 1
fi

project=`perl -MFile::Spec -e '$i=$ARGV[0]; s{\/$}[], chomp for $i; print File::Spec->rel2abs($i)' $project`
safe_project=project

test -f $project/host && host=${host:=`cat $project/host`}

if [ -n "${host}"  ] ; then

    # host validation; it should not contain '../'
    if perl -e '$l=shift(); $l=~/\.\.\// or exit 1' "${host}"; then
        echo "bad host: ${host}"
        exit 1
    fi

    rm -rf ~/.swat/.cache/$host
    mkdir -p ~/.swat/.cache/$host
    session_file=~/.swat/.cache/$host/session.ini
    startup_lock_file=~/.swat/.cache/$host/startup.lock
else
    echo "usage: swat project HOST:port prove-options"
    exit 1
fi


# save environment settings to session file
echo > $session_file
rm -rf $startup_lock_file

if [ -n "${curl_params}" ]; then
    echo "curl_params=$curl_params" >> $session_file
fi

if [ -n "${port}" ]; then
    echo "port=$port" >> $session_file
fi

if [ -n "${ignore_http_err}" ]; then
    echo "ignore_http_err=$ignore_http_err" >> $session_file
fi

if [ -n "${try_num}" ]; then
    echo "try_num=$try_num" >> $session_file
fi

if [ -n "${prove_options}" ]; then
    echo "prove_options=$prove_options" >> $session_file
fi

if [ -n "${debug}" ]; then
    echo "debug=$debug" >> $session_file
fi

if [ -n "${debug_bytes}" ]; then
    echo "debug_bytes=$debug_bytes" >> $session_file
fi

if [ -n "${curl_max_time}" ]; then
    echo "curl_max_time=$curl_max_time" >> $session_file
fi

if [ -n "${curl_connect_timeout}" ]; then
    echo "curl_connect_timeout=$curl_connect_timeout" >> $session_file
fi

if [ -n "${set_server_response}" ]; then
    echo "set_server_response=$set_server_response" >> $session_file
fi


reports_dir=~/.swat/reports/$$/
rm -rf $reports_dir
mkdir -p $reports_dir

tt=1

if test -n  "${test_file}" && test "$is_swat_package" -eq '0' ; then
    find_cmd="find $test_file -type f -name get.txt -o -name post.txt -o -name put.txt"
elif test -n  "${test_file}" && test "$is_swat_package" -eq '1' ; then
    echo "test_file is not supported for swat packages"; exit 1
else
    find_cmd="find $project -type f -name get.txt -o -name post.txt -o -name put.txt"
fi

for f in `$find_cmd`; do
    route_dir=`perl -MFile::Spec -e '$sp=$ARGV[0]; s{\w+\.txt$}[] for $sp; chomp $sp; print File::Spec->rel2abs($sp)' $f`;

    unset ignore_http_err
    unset try_num
    unset debug_bytes
    unset debug
    unset curl_max_time
    unset curl_connect_timeout
    unset curl_params
    unset port
    unset set_server_response

    test -f ~/$swat_ini_file && source ~/$swat_ini_file
    test -f $project/$swat_ini_file && source $project/$swat_ini_file
    test -f 'swat.my' && source 'swat.my'
    test -f $route_dir/$swat_ini_file && source $route_dir/$swat_ini_file

    source $session_file

    # set defaults
    ignore_http_err=${ignore_http_err:=0}
    try_num=${try_num:=2}
    debug=${debug:=0}
    debug_bytes=${debug_bytes:=500}
    curl_max_time=${curl_max_time:=20}
    curl_connect_timeout=${curl_connect_timeout:=20}
    set_server_response=${set_server_response:=0}

    path=`perl -e '$sp=$ARGV[0]; $p=$ARGV[1]; s{^$sp}[], s{\w+\.txt}[], s{/$}[] for $p; chomp $p; $p = "/"  unless $p; print $p' $project $f`;
    mkdir -p "${reports_dir}/${path}";

    http_meth=`perl -e '$p=$ARGV[0]; $p=~/(\w+)\.txt$/ and print uc($1)' $f`;

    if [ -n "${port}" ]; then
        http_url="$host:$port"
    else
        http_url=$host
    fi

    # execute startup hook
    if test -f $startup_lock_file; then
        :
    else
        test -f $project/startup.bash && source $project/startup.bash
        touch $startup_lock_file
    fi

    curl_cmd="curl -X $http_meth"

    curl_cmd="${curl_cmd} -k --connect-timeout $curl_connect_timeout -m $curl_max_time -D - -L --stderr -"

    # execute bash hooks

    test -f $project/hook.bash && source $project/hook.bash
    test -f $route_dir/hook.bash && source $route_dir/hook.bash

    if [ "$ignore_http_err" -eq '0' ]; then
        curl_cmd="$curl_cmd -f"
    fi

    if [ -n "${curl_params}" ]; then
       curl_cmd="$curl_cmd ${curl_params}"
    fi

    real_path=`perl -e  '$p=shift(); s{:([\w_\-\d]+)}($ENV{$1}||":$1")ge for $p; print $p' $path`

    curl_cmd="$curl_cmd $http_url$real_path"

    tfile="${reports_dir}/${path}/00.${http_meth}.t"

    tt=$((tt+1))

    echo 'BEGIN { push @INC, q{'$project'/lib}; }'  > $tfile
    echo >> $tfile


    echo "use Test::More q{no_plan};"  >> $tfile
    echo "use strict;"  >> $tfile
    echo >> $tfile
    echo "BEGIN{"  >> $tfile
    echo our $\content_file = q{"${reports_dir}${tt}.txt};"  >> $tfile
    echo our $\path = q{"${path}};"  >> $tfile
    echo our $\route_dir = q{"${route_dir}};"  >> $tfile
    echo our $\project = q{"${project}};"  >> $tfile
    echo our $\http_meth = q{"${http_meth}};"  >> $tfile
    echo our $\url = q{"${http_url}};"  >> $tfile
    echo our $\debug = $debug';'  >> $tfile
    echo our $\debug_bytes = $debug_bytes';'  >> $tfile
    echo our $\ignore_http_err = $ignore_http_err';'  >> $tfile
    echo our $\try_num = $try_num';'  >> $tfile
    echo our $\curl_cmd = q{"${curl_cmd}};"  >> $tfile
    echo our $\is_swat_package = $is_swat_package';'  >> $tfile
    echo our $\set_server_response = $set_server_response';' >> $tfile

    echo >> $tfile
    echo "}"  >> $tfile
    echo >> $tfile

    echo "require swat;"  >> $tfile

    test -f $project/hook.pm && echo "require '${project}/hook.pm';"  >> $tfile
    test -f $route_dir/hook.pm && echo "require '${route_dir}/hook.pm';"  >> $tfile

    echo >> $tfile

    echo "SKIP: {" >> $tfile
    echo -e "\tgenerate_asserts(q{$f},1)" >> $tfile;
    echo >> $tfile
    echo "}" >> $tfile
    echo >> $tfile

    test -f $route_dir/cleanup.pm && echo "require '${route_dir}/cleanup.pm';"  >> $tfile
    test -f $project/cleanup.pm && echo "require '${project}/cleanup.pm';"  >> $tfile

done;

test -f ~/$swat_ini_file && source ~/$swat_ini_file
test -f 'swat.my' && source 'swat.my'

source $session_file

export port

if [ -z "${rest_args}" ] && [ -n "${prove_options}" ]; then
    rest_args=("$prove_options")
    prove -m -r $rest_args  $reports_dir;
    status=$?
elif [ -n "${rest_args}"  ]; then
    prove -m -r  $rest_args $reports_dir;
    status=$?
else
    prove -m -r -v $reports_dir;
    status=$?
fi


# execute cleanup hook
if test -f $project/cleanup.bash ; then 
    source $project/cleanup.bash || exit 1
    exit $status
else
    exit $status
fi





